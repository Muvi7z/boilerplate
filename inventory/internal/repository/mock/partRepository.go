// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go
//
// Generated by this command:
//
//	mockgen -source=repository.go -destination=mock/partRepository.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	entity "github.com/Muvi7z/boilerplate/inventory/internal/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockPartRepository is a mock of PartRepository interface.
type MockPartRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPartRepositoryMockRecorder
	isgomock struct{}
}

// MockPartRepositoryMockRecorder is the mock recorder for MockPartRepository.
type MockPartRepositoryMockRecorder struct {
	mock *MockPartRepository
}

// NewMockPartRepository creates a new mock instance.
func NewMockPartRepository(ctrl *gomock.Controller) *MockPartRepository {
	mock := &MockPartRepository{ctrl: ctrl}
	mock.recorder = &MockPartRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPartRepository) EXPECT() *MockPartRepositoryMockRecorder {
	return m.recorder
}

// GetPart mocks base method.
func (m *MockPartRepository) GetPart(ctx context.Context, uuid string) (entity.Part, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPart", ctx, uuid)
	ret0, _ := ret[0].(entity.Part)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPart indicates an expected call of GetPart.
func (mr *MockPartRepositoryMockRecorder) GetPart(ctx, uuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPart", reflect.TypeOf((*MockPartRepository)(nil).GetPart), ctx, uuid)
}

// ListPart mocks base method.
func (m *MockPartRepository) ListPart(ctx context.Context, filter entity.Filter) ([]entity.Part, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPart", ctx, filter)
	ret0, _ := ret[0].([]entity.Part)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPart indicates an expected call of ListPart.
func (mr *MockPartRepositoryMockRecorder) ListPart(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPart", reflect.TypeOf((*MockPartRepository)(nil).ListPart), ctx, filter)
}
