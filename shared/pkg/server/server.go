//go:build go1.22

// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package generated

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for PaymentMethod.
const (
	CARD          PaymentMethod = "CARD"
	CREDITCARD    PaymentMethod = "CREDIT_CARD"
	INVESTORMONEY PaymentMethod = "INVESTOR_MONEY"
	SBP           PaymentMethod = "SBP"
	UNKNOWN       PaymentMethod = "UNKNOWN"
)

// Defines values for Status.
const (
	CANCELLED      Status = "CANCELLED"
	PAID           Status = "PAID"
	PENDINGPAYMENT Status = "PENDING_PAYMENT"
)

// Order Заказ
type Order struct {
	// OrderUuid Уникальный идентификатор заказа
	OrderUuid *OrderUuid `json:"order_uuid,omitempty"`

	// PartUuids Список UUID деталей
	PartUuids *PartUuids `json:"part_uuids,omitempty"`

	// PaymentMethod Способ оплаты (если оплачен)
	PaymentMethod *PaymentMethod `json:"payment_method,omitempty"`

	// Status Статус (PENDING_PAYMENT, PAID, CANCELLED)
	Status *Status `json:"status,omitempty"`

	// TransactionUuid UUID транзакции (если оплачен)
	TransactionUuid *TransactionUuid `json:"transaction_uuid,omitempty"`

	// UserUuid Уникальный идентификатор пользователя
	UserUuid *UserUuid `json:"user_uuid,omitempty"`
}

// OrderUuid Уникальный идентификатор заказа
type OrderUuid = openapi_types.UUID

// PartUuids Список UUID деталей
type PartUuids = []string

// PaymentMethod Способ оплаты (если оплачен)
type PaymentMethod string

// Status Статус (PENDING_PAYMENT, PAID, CANCELLED)
type Status string

// TotalPrice Итоговая стоимость
type TotalPrice = float64

// TransactionUuid UUID транзакции (если оплачен)
type TransactionUuid = openapi_types.UUID

// UserUuid Уникальный идентификатор пользователя
type UserUuid = openapi_types.UUID

// N5xx defines model for 5xx.
type N5xx struct {
	// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
	Code *int `json:"code,omitempty"`

	// Message Описание ошибки
	Message string `json:"message"`

	// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
	RequestId *string `json:"request_id,omitempty"`
}

// PostApiV1OrdersJSONBody defines parameters for PostApiV1Orders.
type PostApiV1OrdersJSONBody struct {
	// PartUuids Список UUID деталей
	PartUuids *PartUuids `json:"part_uuids,omitempty"`

	// UserUuid Уникальный идентификатор пользователя
	UserUuid *UserUuid `json:"user_uuid,omitempty"`
}

// PostApiV1OrdersOrderUuidPayJSONBody defines parameters for PostApiV1OrdersOrderUuidPay.
type PostApiV1OrdersOrderUuidPayJSONBody struct {
	// PaymentMethod Способ оплаты (если оплачен)
	PaymentMethod *PaymentMethod `json:"payment_method,omitempty"`
}

// PostApiV1OrdersJSONRequestBody defines body for PostApiV1Orders for application/json ContentType.
type PostApiV1OrdersJSONRequestBody PostApiV1OrdersJSONBody

// PostApiV1OrdersOrderUuidPayJSONRequestBody defines body for PostApiV1OrdersOrderUuidPay for application/json ContentType.
type PostApiV1OrdersOrderUuidPayJSONRequestBody PostApiV1OrdersOrderUuidPayJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /api/v1/orders)
	PostApiV1Orders(w http.ResponseWriter, r *http.Request)

	// (GET /api/v1/orders/{order_uuid})
	GetApiV1OrdersOrderUuid(w http.ResponseWriter, r *http.Request, orderUuid OrderUuid)

	// (POST /api/v1/orders/{order_uuid}/cancel)
	PostApiV1OrdersOrderUuidCancel(w http.ResponseWriter, r *http.Request, orderUuid OrderUuid)

	// (POST /api/v1/orders/{order_uuid}/pay)
	PostApiV1OrdersOrderUuidPay(w http.ResponseWriter, r *http.Request, orderUuid OrderUuid)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// PostApiV1Orders operation middleware
func (siw *ServerInterfaceWrapper) PostApiV1Orders(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiV1Orders(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetApiV1OrdersOrderUuid operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1OrdersOrderUuid(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "order_uuid" -------------
	var orderUuid OrderUuid

	err = runtime.BindStyledParameterWithOptions("simple", "order_uuid", r.PathValue("order_uuid"), &orderUuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order_uuid", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiV1OrdersOrderUuid(w, r, orderUuid)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostApiV1OrdersOrderUuidCancel operation middleware
func (siw *ServerInterfaceWrapper) PostApiV1OrdersOrderUuidCancel(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "order_uuid" -------------
	var orderUuid OrderUuid

	err = runtime.BindStyledParameterWithOptions("simple", "order_uuid", r.PathValue("order_uuid"), &orderUuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order_uuid", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiV1OrdersOrderUuidCancel(w, r, orderUuid)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostApiV1OrdersOrderUuidPay operation middleware
func (siw *ServerInterfaceWrapper) PostApiV1OrdersOrderUuidPay(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "order_uuid" -------------
	var orderUuid OrderUuid

	err = runtime.BindStyledParameterWithOptions("simple", "order_uuid", r.PathValue("order_uuid"), &orderUuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order_uuid", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiV1OrdersOrderUuidPay(w, r, orderUuid)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("POST "+options.BaseURL+"/api/v1/orders", wrapper.PostApiV1Orders)
	m.HandleFunc("GET "+options.BaseURL+"/api/v1/orders/{order_uuid}", wrapper.GetApiV1OrdersOrderUuid)
	m.HandleFunc("POST "+options.BaseURL+"/api/v1/orders/{order_uuid}/cancel", wrapper.PostApiV1OrdersOrderUuidCancel)
	m.HandleFunc("POST "+options.BaseURL+"/api/v1/orders/{order_uuid}/pay", wrapper.PostApiV1OrdersOrderUuidPay)

	return m
}

type N400Response struct {
}

type N401Response struct {
}

type N404Response struct {
}

type N5xxJSONResponse struct {
	// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
	Code *int `json:"code,omitempty"`

	// Message Описание ошибки
	Message string `json:"message"`

	// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
	RequestId *string `json:"request_id,omitempty"`
}

type PostApiV1OrdersRequestObject struct {
	Body *PostApiV1OrdersJSONRequestBody
}

type PostApiV1OrdersResponseObject interface {
	VisitPostApiV1OrdersResponse(w http.ResponseWriter) error
}

type PostApiV1Orders200JSONResponse struct {
	// OrderUuid Уникальный идентификатор заказа
	OrderUuid *OrderUuid `json:"order_uuid,omitempty"`

	// TotalPrice Итоговая стоимость
	TotalPrice *TotalPrice `json:"total_price,omitempty"`
}

func (response PostApiV1Orders200JSONResponse) VisitPostApiV1OrdersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostApiV1Orders400Response = N400Response

func (response PostApiV1Orders400Response) VisitPostApiV1OrdersResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type PostApiV1Orders401Response = N401Response

func (response PostApiV1Orders401Response) VisitPostApiV1OrdersResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type PostApiV1Orders500JSONResponse struct{ N5xxJSONResponse }

func (response PostApiV1Orders500JSONResponse) VisitPostApiV1OrdersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetApiV1OrdersOrderUuidRequestObject struct {
	OrderUuid OrderUuid `json:"order_uuid"`
}

type GetApiV1OrdersOrderUuidResponseObject interface {
	VisitGetApiV1OrdersOrderUuidResponse(w http.ResponseWriter) error
}

type GetApiV1OrdersOrderUuid200JSONResponse Order

func (response GetApiV1OrdersOrderUuid200JSONResponse) VisitGetApiV1OrdersOrderUuidResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApiV1OrdersOrderUuid400Response = N400Response

func (response GetApiV1OrdersOrderUuid400Response) VisitGetApiV1OrdersOrderUuidResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type GetApiV1OrdersOrderUuid401Response = N401Response

func (response GetApiV1OrdersOrderUuid401Response) VisitGetApiV1OrdersOrderUuidResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetApiV1OrdersOrderUuid404Response = N404Response

func (response GetApiV1OrdersOrderUuid404Response) VisitGetApiV1OrdersOrderUuidResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetApiV1OrdersOrderUuid500JSONResponse struct{ N5xxJSONResponse }

func (response GetApiV1OrdersOrderUuid500JSONResponse) VisitGetApiV1OrdersOrderUuidResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostApiV1OrdersOrderUuidCancelRequestObject struct {
	OrderUuid OrderUuid `json:"order_uuid"`
}

type PostApiV1OrdersOrderUuidCancelResponseObject interface {
	VisitPostApiV1OrdersOrderUuidCancelResponse(w http.ResponseWriter) error
}

type PostApiV1OrdersOrderUuidCancel204Response struct {
}

func (response PostApiV1OrdersOrderUuidCancel204Response) VisitPostApiV1OrdersOrderUuidCancelResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type PostApiV1OrdersOrderUuidCancel404Response = N404Response

func (response PostApiV1OrdersOrderUuidCancel404Response) VisitPostApiV1OrdersOrderUuidCancelResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PostApiV1OrdersOrderUuidCancel409Response struct {
}

func (response PostApiV1OrdersOrderUuidCancel409Response) VisitPostApiV1OrdersOrderUuidCancelResponse(w http.ResponseWriter) error {
	w.WriteHeader(409)
	return nil
}

type PostApiV1OrdersOrderUuidCancel500JSONResponse struct{ N5xxJSONResponse }

func (response PostApiV1OrdersOrderUuidCancel500JSONResponse) VisitPostApiV1OrdersOrderUuidCancelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostApiV1OrdersOrderUuidPayRequestObject struct {
	OrderUuid OrderUuid `json:"order_uuid"`
	Body      *PostApiV1OrdersOrderUuidPayJSONRequestBody
}

type PostApiV1OrdersOrderUuidPayResponseObject interface {
	VisitPostApiV1OrdersOrderUuidPayResponse(w http.ResponseWriter) error
}

type PostApiV1OrdersOrderUuidPay200JSONResponse struct {
	// TransactionUuid UUID транзакции (если оплачен)
	TransactionUuid *TransactionUuid `json:"transaction_uuid,omitempty"`
}

func (response PostApiV1OrdersOrderUuidPay200JSONResponse) VisitPostApiV1OrdersOrderUuidPayResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostApiV1OrdersOrderUuidPay400Response = N400Response

func (response PostApiV1OrdersOrderUuidPay400Response) VisitPostApiV1OrdersOrderUuidPayResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type PostApiV1OrdersOrderUuidPay401Response = N401Response

func (response PostApiV1OrdersOrderUuidPay401Response) VisitPostApiV1OrdersOrderUuidPayResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type PostApiV1OrdersOrderUuidPay404Response struct {
}

func (response PostApiV1OrdersOrderUuidPay404Response) VisitPostApiV1OrdersOrderUuidPayResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PostApiV1OrdersOrderUuidPay500JSONResponse struct{ N5xxJSONResponse }

func (response PostApiV1OrdersOrderUuidPay500JSONResponse) VisitPostApiV1OrdersOrderUuidPayResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (POST /api/v1/orders)
	PostApiV1Orders(ctx context.Context, request PostApiV1OrdersRequestObject) (PostApiV1OrdersResponseObject, error)

	// (GET /api/v1/orders/{order_uuid})
	GetApiV1OrdersOrderUuid(ctx context.Context, request GetApiV1OrdersOrderUuidRequestObject) (GetApiV1OrdersOrderUuidResponseObject, error)

	// (POST /api/v1/orders/{order_uuid}/cancel)
	PostApiV1OrdersOrderUuidCancel(ctx context.Context, request PostApiV1OrdersOrderUuidCancelRequestObject) (PostApiV1OrdersOrderUuidCancelResponseObject, error)

	// (POST /api/v1/orders/{order_uuid}/pay)
	PostApiV1OrdersOrderUuidPay(ctx context.Context, request PostApiV1OrdersOrderUuidPayRequestObject) (PostApiV1OrdersOrderUuidPayResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// PostApiV1Orders operation middleware
func (sh *strictHandler) PostApiV1Orders(w http.ResponseWriter, r *http.Request) {
	var request PostApiV1OrdersRequestObject

	var body PostApiV1OrdersJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiV1Orders(ctx, request.(PostApiV1OrdersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiV1Orders")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostApiV1OrdersResponseObject); ok {
		if err := validResponse.VisitPostApiV1OrdersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetApiV1OrdersOrderUuid operation middleware
func (sh *strictHandler) GetApiV1OrdersOrderUuid(w http.ResponseWriter, r *http.Request, orderUuid OrderUuid) {
	var request GetApiV1OrdersOrderUuidRequestObject

	request.OrderUuid = orderUuid

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiV1OrdersOrderUuid(ctx, request.(GetApiV1OrdersOrderUuidRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiV1OrdersOrderUuid")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetApiV1OrdersOrderUuidResponseObject); ok {
		if err := validResponse.VisitGetApiV1OrdersOrderUuidResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostApiV1OrdersOrderUuidCancel operation middleware
func (sh *strictHandler) PostApiV1OrdersOrderUuidCancel(w http.ResponseWriter, r *http.Request, orderUuid OrderUuid) {
	var request PostApiV1OrdersOrderUuidCancelRequestObject

	request.OrderUuid = orderUuid

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiV1OrdersOrderUuidCancel(ctx, request.(PostApiV1OrdersOrderUuidCancelRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiV1OrdersOrderUuidCancel")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostApiV1OrdersOrderUuidCancelResponseObject); ok {
		if err := validResponse.VisitPostApiV1OrdersOrderUuidCancelResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostApiV1OrdersOrderUuidPay operation middleware
func (sh *strictHandler) PostApiV1OrdersOrderUuidPay(w http.ResponseWriter, r *http.Request, orderUuid OrderUuid) {
	var request PostApiV1OrdersOrderUuidPayRequestObject

	request.OrderUuid = orderUuid

	var body PostApiV1OrdersOrderUuidPayJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiV1OrdersOrderUuidPay(ctx, request.(PostApiV1OrdersOrderUuidPayRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiV1OrdersOrderUuidPay")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostApiV1OrdersOrderUuidPayResponseObject); ok {
		if err := validResponse.VisitPostApiV1OrdersOrderUuidPayResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
